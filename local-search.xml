<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>我的自动打卡程序</title>
    <link href="/2021/11/05/daka/"/>
    <url>/2021/11/05/daka/</url>
    
    <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标:"></a>目标:</h2><p>完成学校的每日健康打卡任务</p><h2 id="打卡流程"><a href="#打卡流程" class="headerlink" title="打卡流程:"></a>打卡流程:</h2><p>每天早上八点打开浏览器、打开学工网、登陆账号、点进打卡页面、选择确认、保存表单、确认打卡成功。</p><hr><h2 id="1-配置云服务器"><a href="#1-配置云服务器" class="headerlink" title="1. 配置云服务器"></a>1. 配置云服务器</h2><p>CentOS 7.6 64bit</p><h2 id="2-编写python程序"><a href="#2-编写python程序" class="headerlink" title="2. 编写python程序"></a>2. 编写python程序</h2><h3 id="模块安装"><a href="#模块安装" class="headerlink" title="模块安装"></a>模块安装</h3><ul><li><p>安装playwright模块</p><p>Playwright 是微软开源的一个基于 Node.js 的工具库，可使用一个相同的API调用Chromium（Google-Chrome、Microsoft-Edge）、WebKit（Apple-Safari）和Mozilla-Firefox浏览器自动执行任务。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">pip install playwright -i https:<span class="hljs-regexp">//</span>pypi.douban.com/simple <br></code></pre></td></tr></table></figure></li><li><p>安装chromium浏览器</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">python -m playwright <span class="hljs-keyword">install</span> chromium<br></code></pre></td></tr></table></figure></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>主要就是调用playwright模块里的API，完成打开网页、点击页面元素和输入信息的整个过程。</p><ul><li><p>参考文档<br><a href="https://pypi.org/project/playwright/">pypi文档：Playwright for Python</a><br><a href="https://playwright.dev/docs/api/class-page">playwright API文档</a></p></li><li><p>打开浏览器并创建page对象</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">browser</span> = playwright.chromium.launch(headless=<span class="hljs-literal">True</span>)<br><span class="hljs-attr">context</span> = browser.new_context()<br><span class="hljs-attr">page</span> = context.new_page()<br></code></pre></td></tr></table></figure></li><li><p>用到的函数功能：</p><ul><li><p>去到某个网址：<code>page.goto()</code></p></li><li><p>点击某个元素：<code>page.click()</code>，括号里内容是如何定位到该元素，具体需要看网页源码，参考官方文档<a href="https://playwright.dev/docs/selectors">Playwright元素选择器Selector</a></p></li><li><p>填写文本框（用户名、密码等）：<code>page.fill()</code>，用法：<code>page.fill(selector, value)</code>；<a href="https://playwright.dev/docs/api/class-page#page-fill">官方文档page.fill( )</a></p></li><li><p>在弹出的新页面中继续操作：<code>page.expect_popup()</code>函数，会返回一个<a href="https://docs.python.org/3/reference/datamodel.html#context-managers" title="Event context manager">EventContextManager</a>对象，取它的value就是一个新的page对象（<code>new_page = page.expect_popup().value</code>），后续同上</p></li></ul></li></ul><h2 id="3-设置定时任务执行程序"><a href="#3-设置定时任务执行程序" class="headerlink" title="3. 设置定时任务执行程序"></a>3. 设置定时任务执行程序</h2><ul><li><p>linux系统: <code>crontab -e</code>打开和编辑crond定时任务列表</p><p>🔗<a href="https://linuxhandbook.com/crontab/">学习Linux中crontab的概念。了解如何设置cron作业，以便在预定义的时间自动运行脚本和命令</a></p></li><li><p>macos系统类似linux，windows系统有一个任务计划程序</p></li></ul><h2 id="出现的环境配置问题"><a href="#出现的环境配置问题" class="headerlink" title="出现的环境配置问题"></a>出现的环境配置问题</h2><h5 id="1-检查python文件是否有开启可执行权限"><a href="#1-检查python文件是否有开启可执行权限" class="headerlink" title="1. 检查python文件是否有开启可执行权限"></a>1. 检查python文件是否有开启可执行权限</h5><h5 id="2-python版本的问题"><a href="#2-python版本的问题" class="headerlink" title="2. python版本的问题"></a>2. <strong>python</strong>版本的问题</h5><ul><li><p><strong>检查系统是否存在满足条件的版本：</strong></p><p> playwright要求有python3.7以上版本，检查系统是否安装了这个版本以上的python，再用对应版本的pip安装playwright</p></li><li><p><strong>系统存在多个版本，检查crond执行任务时调用的是否是满足条件的版本：</strong></p><p>出错情况：<br>命令行测试成功，但crond执行失败：crond执行任务的身份是root，通常linux下root的默认python解释器是python2.7，而这个版本下没有安装playwright，导致报错找不到模块；</p><p>查看python版本和调用权限情况：<code>ls -l | grep python</code></p></li></ul><h5 id="3-解决办法参考"><a href="#3-解决办法参考" class="headerlink" title="3. 解决办法参考"></a>3. <strong>解决办法参考</strong></h5><ul><li><p>直接修改root默认版本（不建议）</p></li><li><p>给新版本的python解释器加一个软链接到/usr/bin目录下，例如由conda安装的python3.9：</p><p> <code>ln -s /root/miniconda3/bin/python /usr/bin/python39</code></p><p> 然后在crond定时任务里调用python39解释器：</p><p> <code>0 8 * * * python39 [打卡程序] </code></p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/11/05/hello-world/"/>
    <url>/2021/11/05/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
